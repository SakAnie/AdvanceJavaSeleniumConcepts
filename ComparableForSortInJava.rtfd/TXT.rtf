{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Georgia;\f1\fnil\fcharset0 Georgia-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset178 AlTarikh;\f4\fnil\fcharset0 Menlo-Regular;\f5\fnil\fcharset0 Menlo-Bold;
\f6\fnil\fcharset0 Menlo-Italic;\f7\fnil\fcharset0 Menlo-BoldItalic;\f8\fmodern\fcharset0 CourierNewPSMT;
\f9\fmodern\fcharset0 CourierNewPS-BoldMT;}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red127\green0\blue85;\red127\green0\blue128;
\red63\green127\blue95;\red0\green0\blue192;\red42\green0\blue255;\red100\green100\blue100;\red106\green62\blue62;
\red15\green114\blue1;\red255\green255\blue255;\red29\green38\blue43;\red10\green82\blue135;\red18\green139\blue2;
}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\csgenericrgb\c49804\c0\c33333;\cssrgb\c57919\c12801\c57269;
\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c0\c0\c75294;\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c39216\c39216\c39216;\csgenericrgb\c41569\c24314\c24314;
\cssrgb\c0\c50980\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c15294\c19608\c22353;\cssrgb\c0\c40000\c60000;\cssrgb\c0\c60000\c0;
}
\paperw11900\paperh16840\margl1011\margr1011\margb1445\margt1011\vieww14000\viewh16000\viewkind1\viewscale220
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 COMPARABLE VS COMPARATOR\
==========================\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\fs18 \cf0 \
A> COMPARABLE\
To compare a non-primitive object to itself => COMPARABLE\
HOW CAN WE SORT A LIST OF NON-PRIMITIVE OBJECTS?\
----------------------------------------------------------------------------\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f1\b \cf0 SOLUTION:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\b0 \cf0 Collection.sort(PRIMTIVE_OBJECTS);//work//(Integer,Character,Boolean,Float,String) \
Collection.sort(listOfStudents); //will NOT work-NON-PRIMITIVE\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f1\b \cf0 Explanation:
\f0\b0 \
because 
\f1\b by default 
\f0\b0 all primitive dataType classes(Integer,Character,Boolean,Float,String)
\f1\b  implements Comparable Interface in their class definition
\f0\b0 . Thus, we don\'92t get any issue.\
\
So, if we want to make non-primitive class objects also eligible to use Collections.sort() then , those Classes also need to implement Comparable interface<>. & override their necessary methods.- compareTo() and toString().\
\
\

\f1\b NEED OF COMPARABLE?
\f0\b0 \
Because let\'92s say if properties of Students are ID,Name,Marks. \cf2 So java cant understand on which property basis the sort needs to happen?\
\
Thus, we need to define our own sorting logic in the code.\
\
For that we need two things to be done:-\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0
\cf0 a.)The target NON-PRIMITIVE class will implement the Comparable interface \
Syntax:  
\f2 \cf3 public
\f3 \cf0  
\f2 \cf3 class
\f3 \cf0  
\f2 Student
\f3  
\f2 \cf3 implements
\f3 \cf0  
\f2 Comparable
\f3 <
\f2 Student
\f3 >
\f2 \{
\f3  
\f2 \}
\f3 \

\f0 \
b.)To Override its method \cf4 CompareTo()\cf0  , \cf4 toString()\
\cf0 Syntax: \cf4 \
\
\pard\pardeftab720\partightenfactor0

\f4 \cf5 // Override 1 \cf0 \
	
\f5\b \cf3 public
\f4\b0 \cf0  String toString() \{\
\
		
\f5\b \cf3 return
\f4\b0 \cf0  \cf6 id\cf0  + \cf7 " "\cf0  + \cf6 name\cf0 ;\
\
	\}\
\
\cf5 // Override2-- compare the current object this with the passed Argument\cf0 \
	\cf8 @Override\cf0 \
	
\f5\b \cf3 public
\f4\b0 \cf0  
\f5\b \cf3 int
\f4\b0 \cf0  compareTo(Student \cf9 student\cf0 ) \{\
\
	(A)INT:\cf5 return this.id - student.getId();--->//If we need sorting on the basis of ID\
\
or,\
\
if({\field{\*\fldinst{HYPERLINK "http://this.id"}}{\fldrslt \cf5 this.id}}>student.getID)\{\
return 1;\
else\{\
	return -1;\
\}\cf0 \
	(B)STRING:
\f5\b \cf3 return
\f4\b0 \cf0  \cf6 this.name\cf0 .compareTo(\cf9 student\cf0 .getName());--->\cf5 //If we need sorting on the basis of name()\cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf4 ====================================\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f4\fs18 \cf0 \
\pard\pardeftab720\partightenfactor0

\f5\b \cf3 import
\f4\b0 \cf0  java.util.ArrayList;\

\f5\b \cf3 import
\f4\b0 \cf0  java.util.Collections;\

\f5\b \cf3 import
\f4\b0 \cf0  java.util.List;\
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf5 //Once done, Arrays.sort() & Collections.sort() can be used in the main driver class which has main method\cf0 \
\pard\pardeftab720\partightenfactor0

\f5\b \cf3 public
\f4\b0 \cf0  
\f5\b \cf3 class
\f4\b0 \cf0  ComparableDriver \{\
	
\f5\b \cf3 public
\f4\b0 \cf0  
\f5\b \cf3 static
\f4\b0 \cf0  
\f5\b \cf3 void
\f4\b0 \cf0  main(String[] \cf9 args\cf0 ) \{\
\
		\cf5 // Create Objects Of 'User' Type & call the Collections.sort(listObjForUsers)\cf0 \
		\cf5 // Method\cf0 \
		List<User> \cf9 listObjForUsers\cf0  = 
\f5\b \cf3 new
\f4\b0 \cf0  ArrayList<User>();\
\
		User \cf9 user1\cf0  = 
\f5\b \cf3 new
\f4\b0 \cf0  User(4,\cf7 "Ram"\cf0 );\
		User \cf9 user2\cf0  = 
\f5\b \cf3 new
\f4\b0 \cf0  User(7,\cf7 "Shyam"\cf0 );\
		User \cf9 user3\cf0  = 
\f5\b \cf3 new
\f4\b0 \cf0  User(9,\cf7 "Sakshi"\cf0 );\
		User \cf9 user4\cf0  = 
\f5\b \cf3 new
\f4\b0 \cf0  User(1,\cf7 "Amol"\cf0 );\
\
		\cf9 listObjForUsers\cf0 .add(\cf9 user1\cf0 );\
		\cf9 listObjForUsers\cf0 .add(\cf9 user2\cf0 );\
		\cf9 listObjForUsers\cf0 .add(\cf9 user3\cf0 );\
		\cf9 listObjForUsers\cf0 .add(\cf9 user4\cf0 );\
		\
		\cf5 //Use the function of sort over the collection\cf0 \
		Collections.
\f6\i sort
\f4\i0 (\cf9 listObjForUsers\cf0 ); //no error\
		\
		\cf5 //Print the collect objects after sorting\cf0 \
		
\f5\b \cf3 for
\f4\b0 \cf0 (User \cf9 u\cf0 :\cf9 listObjForUsers\cf0 ) \{\
			System.
\f7\i\b \cf6 out
\f4\i0\b0 \cf0 .println(\cf9 u\cf0 );\
		\}\
\
	\}\
\
\}\
========================================================================================\

\f5\b \cf3 public
\f4\b0 \cf0  
\f5\b \cf3 class
\f4\b0 \cf0  User 
\f5\b \cf3 implements
\f4\b0 \cf0  Comparable<User> \{\
\
	
\f5\b \cf3 int
\f4\b0 \cf0  \cf6 id\cf0 ;\
	String \cf6 name\cf0 ;\
\
	
\f5\b \cf3 public
\f4\b0 \cf0  User(
\f5\b \cf3 int
\f4\b0 \cf0  \cf9 id\cf0 , String \cf9 name\cf0 ) \{\
		
\f5\b \cf3 this
\f4\b0 \cf0 .\cf6 id\cf0  = \cf9 id\cf0 ;\
		
\f5\b \cf3 this
\f4\b0 \cf0 .\cf6 name\cf0  = \cf9 name\cf0 ;\
	\}\
\
	
\f5\b \cf3 public
\f4\b0 \cf0  
\f5\b \cf3 int
\f4\b0 \cf0  getId() \{\
		
\f5\b \cf3 return
\f4\b0 \cf0  \cf6 id\cf0 ;\
	\}\
\
	
\f5\b \cf3 public
\f4\b0 \cf0  
\f5\b \cf3 void
\f4\b0 \cf0  setId(
\f5\b \cf3 int
\f4\b0 \cf0  \cf9 id\cf0 ) \{\
		
\f5\b \cf3 this
\f4\b0 \cf0 .\cf6 id\cf0  = \cf9 id\cf0 ;\
	\}\
\
	
\f5\b \cf3 public
\f4\b0 \cf0  String getName() \{\
		
\f5\b \cf3 return
\f4\b0 \cf0  \cf6 name\cf0 ;\
	\}\
\
	
\f5\b \cf3 public
\f4\b0 \cf0  
\f5\b \cf3 void
\f4\b0 \cf0  setName(String \cf9 name\cf0 ) \{\
		
\f5\b \cf3 this
\f4\b0 \cf0 .\cf6 name\cf0  = \cf9 name\cf0 ;\
	\}\
\
	\cf5 // must write\cf0 \
	
\f5\b \cf3 public
\f4\b0 \cf0  String toString() \{\
\
		
\f5\b \cf3 return
\f4\b0 \cf0  \cf6 id\cf0  + \cf7 " "\cf0  + \cf6 name\cf0 ;\
\
	\}\
\
	\cf5 // must implement\cf0 \
	\cf8 @Override\cf0 \
	
\f5\b \cf3 public
\f4\b0 \cf0  
\f5\b \cf3 int
\f4\b0 \cf0  compareTo(User \cf9 user\cf0 ) \{\
\
		\cf5 //return this.id - user.getId();--->//If we need sorting on the basis of ID\cf0 \
		
\f5\b \cf3 return
\f4\b0 \cf0  this.\cf6 name\cf0 .compareTo(\cf9 user\cf0 .getName());--->\cf5 //If we need sorting on the basis of name()\cf0 \
\
	\}\
\
\}\
\

\f5\b B. COMPARATOR: to compare the Object of one class with the another object of the same or different class.
\f4\b0 \
\
Colllections.sort(student, com);\
\
\

\f5\b WHEN WE NEED COMPARATOR?
\f4\b0 \
Scenario1:\
For non-primitive,\
Suppose we are using Student Class \cf2 from some external library where we cant\'92 change the SOURCE CODE ie we cant make the Student Class to implement COMPARABLE interface.\cf0 \
Then how will you perform Collection.sort(studentObjs)?\
\
\
Scenario2:\
For primitive data type class objects, \

\f5\b if we want to tweak the logic of comparison
\f4\b0  , then we can use COMPARATOR for Such Class Objects.\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \
Example:\
in the driver main method class only, write the comparator code under main function as follows\
\pard\pardeftab720\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2022-03-06 at 3.26.57 PM.png \width10220 \height9520 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
COMPARATOR: used when a particular class objects needs to be compared by some third party class objects.\
==============================================\
\pard\pardeftab720\partightenfactor0

\f8\fs18 \AppleTypeServices\AppleTypeServicesF65539 \cf10 \cb11 \expnd0\expndtw0\kerning0
// Class to compare Movies by ratings\cf12 \

\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 class
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  RatingCompare 
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 implements
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  Comparator<Movie>\
\{\
\'a0\'a0\'a0\'a0
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 public
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 int
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  compare(Movie m1, Movie m2)\
\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 if
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  (m1.getRating() < m2.getRating()) 
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 return
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  -\cf14 1\cf12 ;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 if
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  (m1.getRating() > m2.getRating()) 
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 return
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  \cf14 1\cf12 ;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 else
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 return
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  \cf14 0\cf12 ;\
\'a0\'a0\'a0\'a0\}\
\}\
\'a0\
\cf10 // Class to compare Movies by name\cf12 \

\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 class
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  NameCompare 
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 implements
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  Comparator<Movie>\
\{\
\'a0\'a0\'a0\'a0
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 public
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 int
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  compare(Movie m1, Movie m2)\
\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f9\b \AppleTypeServices\AppleTypeServicesF65539 \cf13 return
\f8\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf12  m1.getName().compareTo(m2.getName());\
\'a0\'a0\'a0\'a0\}\
\}\
\'a0
\fs24 \AppleTypeServices\AppleTypeServicesF65539 \
\pard\pardeftab720\partightenfactor0

\f4 \AppleTypeServices \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0 \cf0 \
}{\*\beandata789c9d935d6f82301486aff157748db752d876b12d8851c1c4cc2099b86497153a65e32ba5cef1ef57444aeb66b68c1bda73fabe4f7b4e6b8d3ed3047c105ac6793684a66e4040b2308fe26c3b84eb6036b88323bb675d39cb69f0e2bba048e292017f3d59cca7000e101a17454210720207f88bf92a00dc0321d78300ee182b1e103a1c0e3aae57e9619ed60b4be4d3bc2094550b6e36e0023d6211e498c65dd90e8f4671c8ec9e66bd93caee631aee62bec242f594474b46f9666d6ff5482a128d45fa146f75f9e68d84ac14324c29ae07c2a09fed934492692d573b3984092e855e4e37f9e9acbf9e3b5d5eb3e28c912da1f6ad85dae1518854636fa5f39fec2cf6a6502e603aceb5ca5140a8f36ca16715f93ff7e64fdc2eda567ce28ebd27f6ead6f78d778ef1e866cf48f9dcf4dfdba71ba591d2490dd334ee0df5c03ff68b5c3a9fb8360e57711aa6958c92572c8f8552b2dfead9d0329c1289f70b4354a4736bbc585e887b2a8a56cf2704670e665830cece7cde24513053ad540756ded6e9e109b6501bf52759b43a0b1d5facddfb02aa1d4161}