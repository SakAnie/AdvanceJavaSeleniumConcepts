{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Georgia;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fnil\fcharset0 Futura-Medium;\f4\fswiss\fcharset0 ArialMT;\f5\fswiss\fcharset0 Arial-BoldMT;
\f6\fnil\fcharset0 Menlo-Regular;\f7\fnil\fcharset0 Menlo-Bold;\f8\fnil\fcharset0 Menlo-BoldItalic;
}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red255\green255\blue255;\red28\green33\blue38;
\red153\green102\blue51;\red24\green25\blue27;\red0\green0\blue0;\red127\green0\blue85;\red106\green62\blue62;
\red0\green0\blue192;\red42\green0\blue255;\red29\green38\blue43;}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c14510\c17255\c20000;
\cssrgb\c66800\c47512\c25860;\cssrgb\c12549\c12941\c14118;\cssrgb\c0\c0\c0;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c41569\c24314\c24314;
\csgenericrgb\c0\c0\c75294;\csgenericrgb\c16471\c0\c100000;\cssrgb\c15294\c19608\c22353;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1011\margr1011\margb1445\margt1011\vieww14000\viewh16000\viewkind1\viewscale220
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\fs18 \cf0 \
\
\
TIME & SPACE COMPLEXITY\
======================\
JAVA SORT\
JAVA SEARCH\
\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
Time complexity\cf4  of an algorithm quantifies the amount of time taken by an algorithm to run as a function of the length of the input. TimeComplexity can be \cf2 Best\cf4  & \cf2 Worst\cf4 .\
	Similarly, \cf2 Space complexity\cf4  of an algorithm quantifies the amount of space or memory taken by an algorithm to run as a function of the length of the input.\
\
\
How do you calculate time complexity of a program?\
=======================================\
we calculate time complexity for:-\
(i)Worst Case Scenario\
(ii)Very Large Input Size\
\
3n^2+7n+4---> O(n2)\
\
\cf5 1)for loop\
---------------\cf4 \
for(int i=0;i<n ; i++)\{ //repeats n times , so n\
x=t+h; //Constant time C\
\}\
\
= C*n =cn=O(n)\
\
\cf5 2) nested Loop\
----------------------\cf4 \
if(int i=0;i<n;i++)\{ \cf5 //ntimes\cf4 \
	for (int j=0;j<n;j++)\{ \cf5 //ntimes\
\cf4 	s=5+4; \cf5 //contant C1\cf4 \
		\}\
	\}\
n * C1n= C1n^2 = O(n2)\
\
3) Sequential statements- we simply add the time taken by each one of the statements.\
=====\
\
SORT:\
=====\
{\field{\*\fldinst{HYPERLINK "https://www.crio.do/blog/top-10-sorting-algorithms/"}}{\fldrslt https://www.crio.do/blog/top-10-sorting-algorithms/}}\
\
Real Life Example: MAANGS\
\pard\pardeftab720\partightenfactor0
\cf4 {{\NeXTGraphic Screenshot 2022-03-28 at 5.38.55 PM.png \width16240 \height5000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic Screenshot 2022-01-21 at 8.36.09 PM.png \width15640 \height9780 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
C1+C2n+C3n= O(n)\
\
\cf5 4) if else:-\
----------------\cf4 \
if()\{\
n\
\}\
else\{\
n2\
\{\
 = O(n2)\
\
\pard\pardeftab720\partightenfactor0
\cf4 {{\NeXTGraphic Screenshot 2022-01-22 at 12.18.33 AM.png \width28800 \height18000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf4 {{\NeXTGraphic Screenshot 2022-01-22 at 12.21.38 AM.png \width28800 \height18000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\
Other Examples of Time complexity:-\
------------------------------------------------\
\pard\pardeftab720\partightenfactor0

\f2\b \cf5  1. Tip1:
\f1\b0 \cf4 \
for(int i=0;i<=n;i*2)\
or\
for(int i=0;i<=n;i/2)\
 There ,O(log2n) .\
similarly wherever a loop has increment which is i=i*k or i=i/k then O(logkn).\
\

\f2\b \cf5 2 Tip2:
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic Screenshot 2022-01-23 at 1.42.58 PM.png \width3620 \height3060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\
i->1->2->3->4->5 --Z\
k->1->3->6->10->15->...n\
Try to find a pattern between the two variable i & k.\
\
n= sum of first Z numbers=Z(Z+1)/2=Z2+Z=Z2 . thus time complexity \
\cf5 O(root square n)\
\
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic Screenshot 2022-01-23 at 1.57.26 PM.png \width4100 \height3500 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf5 \
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf5 Tip3:
\f1\b0 \
nested loops 3\
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic Screenshot 2022-01-23 at 2.00.59 PM.png \width5420 \height2700 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0

\f2\b \cf5 Tip4:
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf5 {{\NeXTGraphic Screenshot 2022-01-23 at 2.03.52 PM.png \width5600 \height2680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0

\f2\b \cf5 Tip5:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf5 {{\NeXTGraphic Screenshot 2022-01-23 at 2.05.07 PM.png \width5420 \height2840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \
How Do you calculate Space complexity?\
\pard\pardeftab720\partightenfactor0
\cf4 {{\NeXTGraphic Screenshot 2022-01-22 at 12.23.14 AM.png \width28800 \height18000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf4 {{\NeXTGraphic Screenshot 2022-01-22 at 12.24.27 AM.png \width28800 \height18000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\
JAVA_SORT:\
\
 [[1]]
\f2\b bubble Sort 
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f4 \cf6 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 The \cf2 space complexity\cf7  for Bubble Sort is \cf2 O(1),\cf7 \'a0
\f5\b because only a single additional memory space is required i.e. for temp variable
\f4\b0 . \
\
Also, the \cf2 best case time\cf7  complexity will be \cf2 O(n)\cf7 , it is when the list is already sorted. The \cf2 worst case time\cf7  complexity will be \cf2 O\{n2)\cf7  when the array is sprted in opposite fashion the way it is actually needed\cf6 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb3 \
1. Bubble_sort
\f6 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
		
\f7\b \cf8 int
\f6\b0 \cf0  \cf9 b\cf0 []= \{4,5,3,3,2,1,1,4\};\
		\
		System.
\f8\i\b \cf10 out
\f6\i0\b0 \cf0 .println(\cf11 "Before sorting array b is"\cf0 );\
		
\f7\b \cf8 for
\f6\b0 \cf0 (
\f7\b \cf8 int
\f6\b0 \cf0  \cf9 y\cf0 :\cf9 b\cf0 ) \{\
			System.
\f8\i\b \cf10 out
\f6\i0\b0 \cf0 .print(\cf11 " "\cf0 +\cf9 y\cf0 );\
		\}\
		
\f7\b \cf8 for
\f6\b0 \cf0 (
\f7\b \cf8 int
\f6\b0 \cf0  \cf9 i\cf0 =0;\cf9 i\cf0 <\cf9 b\cf0 .\cf10 length\cf0 ;\cf9 i\cf0 ++) \{\
			
\f7\b \cf8 for
\f6\b0 \cf0 (
\f7\b \cf8 int
\f6\b0 \cf0  \cf9 j\cf0 =\cf9 i\cf0 +1;\cf9 j\cf0 <\cf9 b\cf0 .\cf10 length\cf0 ;\cf9 j\cf0 ++) \{\
				
\f7\b \cf8 int
\f6\b0 \cf0  \cf9 temp\cf0 ;\
				
\f7\b \cf8 if
\f6\b0 \cf0 (\cf9 b\cf0 [\cf9 i\cf0 ]>\cf9 b\cf0 [\cf9 j\cf0 ]) \{\
					\cf9 temp\cf0 =\cf9 b\cf0 [\cf9 j\cf0 ];\
					\cf9 b\cf0 [\cf9 j\cf0 ]=\cf9 b\cf0 [\cf9 i\cf0 ];\
					\cf9 b\cf0 [\cf9 i\cf0 ]=\cf9 temp\cf0 ;\
					\
				\}\
			\}\
		\}\
		System.
\f8\i\b \cf10 out
\f6\i0\b0 \cf0 .println(\cf11 "Sorted array is"\cf0 );\
		
\f7\b \cf8 for
\f6\b0 \cf0 (
\f7\b \cf8 int
\f6\b0 \cf0  \cf9 x\cf0 :\cf9 b\cf0 ) \{\
			System.
\f8\i\b \cf10 out
\f6\i0\b0 \cf0 .print(\cf11 " "\cf0 +\cf9 x\cf0 );\
		\}\
\
\
2. Merge Sort\
\
\
(i)Divide the array into two half(s)\
(ii)Apply merge sort recursion to array \{ 0, mid\} -Left array & \{mid+1, array.length\}-right array\
(iii)Now, merge them together in sorted fashion\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 Space Complexity\cf0  of Merge Sort is \cf2 O(n)\cf0 :\
->coz of usage to temp array of merging\
\
\cf2 Time Complexity\cf0  of Merge Sort is always \cf2 O(nlogn) - Best Case as well as Worst case\cf0  because same steps will be executed in best as well as worst case\
\
\pard\pardeftab720\partightenfactor0

\f7\b \cf0 Drawbacks of Merge Sort even though time complexity is less:-
\f6\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1 \AppleTypeServices\AppleTypeServicesF65539 \cf12 \cb3 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Slower comparative to the other sort algorithms for smaller tasks.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Merge sort algorithm requires an additional memory space of 0(n) for the temporary array.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
It goes through the whole process even if the array is sorted.\cb1 \
\pard\pardeftab720\partightenfactor0

\f6 \AppleTypeServices \cf0 \kerning1\expnd0\expndtw0 \
}{\*\beandata789c9d935d6f82301486aff157748db752d876b12d8851c1c4cc2099b86497153a65e32ba5cef1ef57444aeb66b68c1bda73fabe4f7b4e6b8d3ed3047c105ac6793684a66e4040b2308fe26c3b84eb6036b88323bb675d39cb69f0e2bba048e292017f3d59cca7000e101a17454210720207f88bf92a00dc0321d78300ee182b1e103a1c0e3aae57e9619ed60b4be4d3bc2094550b6e36e0023d6211e498c65dd90e8f4671c8ec9e66bd93caee631aee62bec242f594474b46f9666d6ff5482a128d45fa146f75f9e68d84ac14324c29ae07c2a09fed934492692d573b3984092e855e4e37f9e9acbf9e3b5d5eb3e28c912da1f6ad85dae1518854636fa5f39fec2cf6a6502e603aceb5ca5140a8f36ca16715f93ff7e64fdc2eda567ce28ebd27f6ead6f78d778ef1e866cf48f9dcf4dfdba71ba591d2490dd334ee0df5c03ff68b5c3a9fb8360e57711aa6958c92572c8f8552b2dfead9d0329c1289f70b4354a4736bbc585e887b2a8a56cf2704670e665830cece7cde24513053ad540756ded6e9e109b6501bf52759b43a0b1d5facddfb02aa1d4161}