{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Georgia-Bold;\f1\fnil\fcharset0 Georgia;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-BoldItalic;\f5\fswiss\fcharset0 Helvetica-Bold;
\f6\fswiss\fcharset0 Helvetica;\f7\fmodern\fcharset0 Courier;\f8\fmodern\fcharset0 Courier-Bold;
\f9\fswiss\fcharset0 Optima-Bold;\f10\fswiss\fcharset0 Helvetica-BoldOblique;\f11\fswiss\fcharset0 Helvetica-Oblique;
\f12\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red0\green0\blue214;\red42\green15\blue108;
\red78\green0\blue238;\red0\green0\blue255;\red0\green0\blue0;\red106\green62\blue62;\red127\green0\blue85;
\red63\green127\blue95;\red0\green0\blue192;\red108\green80\blue59;\red251\green2\blue255;\red29\green38\blue43;
\red255\green255\blue255;\red127\green0\blue128;\red247\green247\blue247;}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\cssrgb\c0\c0\c87118;\cssrgb\c22055\c12142\c50000;
\cssrgb\c38636\c9932\c94785;\cssrgb\c1680\c19835\c100000;\cssrgb\c0\c0\c0;\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c49804\c0\c33333;
\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c0\c0\c75294;\cssrgb\c50000\c38878\c29744;\cssrgb\c100000\c25279\c100000;\cssrgb\c15294\c19608\c22353;
\cssrgb\c100000\c100000\c100000;\cssrgb\c57919\c12801\c57269;\cssrgb\c97647\c97647\c97647;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1011\margr1011\margb1445\margt1011\vieww14000\viewh16000\viewkind1\viewscale220
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 HashSet\
=======
\f1\b0 \
 HASHSET INTERFACE 
\f2 \cf2 [1, 2, 3, 4, 5]
\f1 \cf0 \
\
- All elements must be 
\f0\b UNIQUE
\f1\b0 . No duplicate elements allowed.\
-
\f0\b RANDOM ORDERED 
\f1\b0 .(\cf3 Not sequential)\cf0  No get(index) method .
\f0\b \cf4 No concept of index number
\f1\b0  in HashSet\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0
\cf0 - At - most 
\f0\b Only one NULL
\f1\b0  element in HashSet is allowed.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\b \cf0 Why?
\f1\b0 Because \cf5 Internally HashSet is stored as HashMap <K,V>\cf0  where\

\f0\b K= Element of the HashSet 
\f1\b0 . (we know for HashMap , only one K can be null at max, however, multiple Value can be NULL. Since we store HashSet elements as Keys inside a HashMap so only one Key can be NULL.)\

\f0\b  V= PRESENT (Constant) -> Object type FINAL reference.\
\

\f1\b0 \cf2 private static final Object 
\f0\b PRESENT
\f1\b0 =new Object(); \cf0 /\cf6 /is defined as Class variable inside HashSet class definition\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\b \cf7 HashSet= HashMap<HashSet_element,PRESENT>;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f1\b0 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 SET Vs LIST
\f1\b0\fs18 \
REAL EXAMPLE:\
Suppose , we are on an E-Commerce website. We added some item to the cart. Now, if we try to add the same item 	   to the cart again, it should be allowed & its number will increase to 2. Thus, we will use ArrayList here not the Set          data structure.\
>> \cf2 LIST accepts duplicate values. SET does NOT accept duplicate values.\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0
\cf2 >>LIST elements are added in sequential manner. SET: not in sequential manner. objects are stored in random manner in a SET. hence, we cant use methods like charAt(), indexOf(), get() in SET\cf0 \
>>LIST implemented by  LinkedList, ArrayList classes\
     SET is implemented by HashSet , LinkedHashSet\
>>\cf2 LIST elements/objects can be accessed using get() method\
SET objects can NOT be accessed using get() method.\cf0 \
>> LIST: is used when we frequently need to access elements at specific indexes.\
     
\f0\b\fs24 SET: is used when we need to create a collection of DISTINCT objects\

\f1\b0\fs18 >> Program:\
\pard\pardeftab720\partightenfactor0

\f2 \cf0 HashSet<Integer> \cf8 hs\cf0 =
\f3\b \cf9 new
\f2\b0 \cf0  HashSet<Integer>();\
		\
		\cf10 //1. INSERTION IN HASHSET\cf0 \
		\cf8 hs\cf0 .add(1);\
		\cf8 hs\cf0 .add(2);\
		\cf8 hs\cf0 .add(3);\
		\cf8 hs\cf0 .add(4);\
		\cf8 hs\cf0 .add(5);\
		\cf8 hs\cf0 .add(5); \cf10 //will be ignored\cf0 \
		System.
\f4\i\b \cf11 out
\f2\i0\b0 \cf0 .println(\cf8 hs\cf0 );\
		\
		\cf10 //2. DELETION IN HASHSET. delete a specific object\cf0 \
		\cf8 hs\cf0 .remove(4);
\f3\b\fs26 \cf12  //here, in HashSet 4 is not the index number but the object only
\f2\b0\fs18 \cf0 \
		System.
\f4\i\b \cf11 out
\f2\i0\b0 \cf0 .println(\cf8 hs\cf0 );\
		\
		\cf10 //3. HASHSET does not store data in a sequential fashion, this is the reason why we can not retrieve or remove  data on the\cf0 \
		\cf10 on the basis of index number in a hashSet\cf0 \
		\
		\cf10 //HashSet will not accept DUPLICATE VALUES. if we give then it will simply IGNORE THE DUPLICATED OBJ VALUE\
\
\
		//4. ITERATOR() CLASS FOR ITERATING OVER HASHSET ELEMENTS \cf0 \
		Iterator<Integer> \cf8 it\cf0 =\cf8 hs\cf0 .iterator();\
		
\f3\b \cf9 while
\f2\b0 \cf0 (\cf8 it\cf0 .hasNext()) \{\
			Integer tempKey= it.next();\
			\cf13 //using this TempKey you can do the logic\
			\cf0 \
		\}
\f1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\fs24 \cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f0\b \cf0 HASHSet has 4 CONTRUCTORS\
=========================\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2022-03-05 at 12.12.05 AM.png \width4480 \height5700 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\f1\b0 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\fi722\sl288\slmult1\pardirnatural\partightenfactor0

\fs18 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qj\partightenfactor0
\ls1\ilvl0
\f5\b \AppleTypeServices\AppleTypeServicesF65539 \cf14 \cb15 \expnd0\expndtw0\kerning0
		Iniitial Capacity:
\f6\b0 \AppleTypeServices\AppleTypeServicesF65539 \'a0The initial capacity means the number of buckets when hashtable (HashSet internally uses hashtable data structure) is created.(
\f5\b \AppleTypeServices\AppleTypeServicesF65539 HashTable=11,HashMap=16)
\f6\b0 \AppleTypeServices\AppleTypeServicesF65539  The number of buckets will be automatically increased if the current size gets full.\'a0 \cb1 \uc0\u8232 \cb15 \'a0\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qj\partightenfactor0
\ls1\ilvl0
\f5\b \AppleTypeServices\AppleTypeServicesF65539 \cf14 \cb15 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Load Factor:
\f6\b0 \AppleTypeServices\AppleTypeServicesF65539 \'a0The load factor is a measure of how full the HashSet is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.\cb1 \uc0\u8232 \cb15 \'a0\cb1 \
\pard\pardeftab720\partightenfactor0

\f7 \AppleTypeServices \cf14                   Number of stored elements in the table\
\pard\pardeftab720\partightenfactor0

\f8\b \cf14 Load Factor
\f7\b0 \'a0= -----------------------------------------\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Size of the hash table\'a0\
\
\
\pard\pardeftab720\partightenfactor0

\f9\b \cf13 // Constructor - 1
\f7\b0 \cf14 \
\cf16 // All the constructors are internally creating HashMap Object.\cf14 \
public HashSet()\
\{\
    // Creating internally backing HashMap object\
    map = new HashMap();\
\}\
\
\cf16 // Constructor - 2\cf14 \
public HashSet(int initialCapacity)\
\{\
    // Creating internally backing HashMap object\
    map = new HashMap(initialCapacity);\
\}\
\
\cf16 // Dummy value to associate with an Object in Map\cf14 \
private static final Object PRESENT = new Object();\
\
public boolean add(E e)\
\{\
   return map.put(e, PRESENT) == null;\
\}\
\
public boolean remove(Object o)\
\{\
\'a0\'a0return map.remove(o) == PRESENT;\
\}\
\
\pard\pardeftab720\partightenfactor0

\f6 \AppleTypeServices\AppleTypeServicesF65539 \cf14 \cb15 HashSet not only stores unique Objects but also a unique Collection of Objects
\f5\b \AppleTypeServices\AppleTypeServicesF65539 \'a0
\f6\b0 \AppleTypeServices\AppleTypeServicesF65539 like\'a0{\field{\*\fldinst{HYPERLINK "https://www.geeksforgeeks.org/arraylist-in-java/"}}{\fldrslt \cf0 \ul \ulc0 ArrayList<E>}},\'a0{\field{\*\fldinst{HYPERLINK "https://www.geeksforgeeks.org/linked-list-in-java/"}}{\fldrslt \cf0 \ul \ulc0 LinkedList<E>}},\'a0{\field{\*\fldinst{HYPERLINK "https://www.geeksforgeeks.org/java-util-vector-class-java/#:~:text=The%20Vector%20class%20implements%20a%20growable%20array%20of%20objects.&text=They%20are%20very%20similar%20to,AbstractList%20and%20implements%20List%20interfaces."}}{\fldrslt \cf0 \ul \ulc0 Vector<E>}},..etc.\
\
\pard\pardeftab720\partightenfactor0

\f10\i\b \AppleTypeServices\AppleTypeServicesF65539 \cf14 \cb17 Time Complexity of HashSet Operations:
\f11\b0 \AppleTypeServices\AppleTypeServicesF65539 \'a0The underlying data structure for HashSet is hashtable. So amortize (average or usual case) time complexity for add, remove and look-up (contains method) operation of HashSet takes\'a0
\f10\b \AppleTypeServices\AppleTypeServicesF65539 O(1)
\f11\b0 \AppleTypeServices\AppleTypeServicesF65539 \'a0time.
\f7\i0 \AppleTypeServices \cb1 \
\
\
\pard\pardeftab720\partightenfactor0

\f12\b \cf14 CONVERT HASHSET TO ARRAY:
\f7\b0  \cf16 hashsetObj.toArray() \cf14 --> Object[]  return type\

\f12\b CONVERT HASHSET TO STRING:
\f7\b0  \cf16 hashsetObj.toArray.toString()\cf14  --> String return type}{\*\beandata789c9d935d6f82301486aff157748db752d876b12d8851c1c4cc2099b86497153a65e32ba5cef1ef57444aeb66b68c1bda73fabe4f7b4e6b8d3ed3047c105ac6793684a66e4040b2308fe26c3b84eb6036b88323bb675d39cb69f0e2bba048e292017f3d59cca7000e101a17454210720207f88bf92a00dc0321d78300ee182b1e103a1c0e3aae57e9619ed60b4be4d3bc2094550b6e36e0023d6211e498c65dd90e8f4671c8ec9e66bd93caee631aee62bec242f594474b46f9666d6ff5482a128d45fa146f75f9e68d84ac14324c29ae07c2a09fed934492692d573b3984092e855e4e37f9e9acbf9e3b5d5eb3e28c912da1f6ad85dae1518854636fa5f39fec2cf6a6502e603aceb5ca5140a8f36ca16715f93ff7e64fdc2eda567ce28ebd27f6ead6f78d778ef1e866cf48f9dcf4dfdba71ba591d2490dd334ee0df5c03ff68b5c3a9fb8360e57711aa6958c92572c8f8552b2dfead9d0329c1289f70b4354a4736bbc585e887b2a8a56cf2704670e665830cece7cde24513053ad540756ded6e9e109b6501bf52759b43a0b1d5facddfb02aa1d4161}